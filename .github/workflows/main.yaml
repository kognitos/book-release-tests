name: Main Pipeline
on:
  push:
    branches: [ main, test_changes ]
  pull_request:
    branches: [ main ]

# env:
#   PROJECT_NAME: "kognitos"
#   BOOK_NAME: "my_book"  # To be set by cookiecutter
#   DOCKER_REGISTRY: "719468614044.dkr.ecr.us-west-2.amazonaws.com" # To be set by cookiecutter???


jobs:
  # TestJob:
  #   uses: ./.github/workflows/rw-setup-configuration-variables.yaml
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.list }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - shell: bash
        run: pip install pyyaml toml
      - shell: bash
        id: matrix
        run: python ./.github/scripts/setup.py ./book-config.yaml #${{ inputs.CONFIG_FILE_PATH }}

  output:
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      ${{ fromJSON(needs.setup.outputs.matrix) }}
    steps:
    - shell: bash
      id: matrix_output
      run: |
        echo "Matrixval=\"${{ matrix.value }}\"" >> $GITHUB_OUTPUT
        echo "SECONDENV=123123123" >> $GITHUB_ENV
        echo "${{ toJSON(job) }}"
        echo "${{ toJSON(runner) }}"
        echo "${{ toJSON(secrets) }}"
        echo "${{ toJSON(strategy) }}"
        echo "${{ toJSON(matrix) }}"
        echo "${{ toJSON(needs) }}"
  Job2:
    runs-on: ubuntu-latest
    needs: output
    steps:
    - run: |
        echo "${{ toJSON(env) }}"
        echo "${{ toJSON(job) }}"
        echo "${{ toJSON(steps) }}"
        echo "${{ toJSON(runner) }}"
        echo "${{ toJSON(secrets) }}"
        echo "${{ toJSON(strategy) }}"
        echo "${{ toJSON(matrix) }}"
        echo "${{ toJSON(needs) }}"
        echo "${{ toJSON(inputs) }}"

    # - shell: bash
    #   run: echo '${{ toJSON(secrets) }}'
    # - uses: ./.github/actions/setup_credentials
    #   id: creds
    #   with:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
    #     AWS_ROLE_EXTERNAL_ID: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}

    # - run: |
    #     echo ${{ steps.creds.outputs.CODE_ARTIFACT_TOKEN }}
    #     echo ${{ steps.creds.outputs.DOCKER_REGISTRY_USER }}
    #     echo ${{ steps.creds.outputs.DOCKER_REGISTRY_PASSWORD }}

    # - uses: hashicorp/setup-terraform@v3
    #   with:
    #     terraform_wrapper: false

    # - shell: bash
    #   run: terraform -chdir=./test_tf init

    # - shell: bash
    #   id: apply
    #   run: terraform -chdir=./test_tf apply -auto-approve
  
    # - shell: bash
    #   id: output
    #   run: echo "lambda_name=$(terraform -chdir=./test_tf output name)" >> $GITHUB_OUTPUT


  # CheckAndTestCode:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout Source Code
  #     uses: actions/checkout@v4
  #   - name: Setup Credentials
  #     uses: ./.github/actions/setup_credentials
  #     id: setup_credentials
  #     with:
  #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  #       AWS_ROLE_EXTERNAL_ID: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
  #   - uses: ./.github/actions/gitlint
  #   - uses: ./.github/actions/check_and_test_code
  #     with:
  #       CODE_ARTIFACT_TOKEN: ${{ steps.setup_credentials.outputs.CODE_ARTIFACT_TOKEN }}

# --------- Up to here I want to check on PRs

  # SemanticRelease:
  #   runs-on: ubuntu-latest
  #   needs: CheckAndTestCode
  #   steps:
  #   - name: Checkout Source Code
  #     uses: actions/checkout@v4
  #   - name: Setup Credentials
  #     uses: ./.github/actions/setup_credentials
  #     id: setup_credentials
  #     with:
  #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  #       AWS_ROLE_EXTERNAL_ID: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
  #   - name: Semantic Release Docker Image
  #     id: semantic
  #     uses: cycjimmy/semantic-release-action@v4
  #     with:
  #       branches: |
  #         main
  #       extra_plugins: |
  #         @codedependant/semantic-release-docker
  #     env:
  #       CODE_ARTIFACT_TOKEN: ${{ steps.setup_credentials.outputs.CODE_ARTIFACT_TOKEN }}
  #       DOCKER_REGISTRY_USER: ${{ steps.setup_credentials.outputs.DOCKER_REGISTRY_USER }}
  #       DOCKER_REGISTRY_PASSWORD: ${{ steps.setup_credentials.outputs.DOCKER_REGISTRY_PASSWORD }}
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       DOCKER_PROJECT: ${{ env.PROJECT_NAME }}

  #   # TODO maybe we should ensure the s3 backend exists first?
  #   - name: Terraform Deploy
  #     uses: ./.github/actions/terraform
  #     if: steps.semantic.outputs.new_release_published == 'true'
  #     with:
  #       MAJOR_VERSION: ${{ steps.semantic.outputs.new_release_major_version }}
  #       MINOR_VERSION: ${{ steps.semantic.outputs.new_release_minor_version }}
  #       PATCH_VERSION: ${{ steps.semantic.outputs.new_release_patch_version }}
  #       PROJECT_NAME: ${{ env.PROJECT_NAME }}
  #       BOOK_NAME: ${{ env.BOOK_NAME }}
  #       DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY }}
